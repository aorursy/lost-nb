#!/usr/bin/env python
# coding: utf-8



from IPython.display import YouTubeVideo
YouTubeVideo('ABBnNjbjv2Q', width=800, height=450)




# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load in 

import numpy as np
import pandas as pd

import os
import json
from pathlib import Path

import matplotlib.pyplot as plt
from matplotlib import colors
print(os.listdir("../input/"))
# Input data files are available in the "../input/" directory.
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os

# Any results you write to the current directory are saved as output.








from __future__ import absolute_import, division, print_function, unicode_literals
try:
    # %tensorflow_version only exists in Colab.
    get_ipython().run_line_magic('tensorflow_version', '2.x')
except Exception:
    pass
import tensorflow as tf
import logging
import tensorflow_lattice as tfl
import sys
from tensorflow import keras
tf.compat.v1.set_random_seed(123)
session_conf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)
sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)
tf.compat.v1.keras.backend.set_session(sess)
logging.disable(sys.maxsize)




for dirname, _, filenames in os.walk('/kaggle/input'):
    print(dirname)




from pathlib import Path

data_path = Path('/kaggle/input/abstraction-and-reasoning-challenge/')
training_path = data_path / 'training'
evaluation_path = data_path / 'evaluation'
test_path = data_path / 'test'




training_tasks = sorted(os.listdir(training_path))
print(training_tasks[:3])




task_file = str(training_path / '00d62c1b.json')

with open(task_file, 'r') as f:
    task = json.load(f)

print(task.keys())




n_train_pairs = len(task['train'])
n_test_pairs = len(task['test'])

print(f'task contains {n_train_pairs} training pairs')
print(f'task contains {n_test_pairs} test pairs')




display(task['train'][0]['input'])
display(task['train'][0]['output'])




def plot_task(task):
    """
    Plots the first train and test pairs of a specified task,
    using same color scheme as the ARC app
    """
    cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
    norm = colors.Normalize(vmin=0, vmax=9)
    fig, axs = plt.subplots(1, 4, figsize=(15,15))
    axs[0].imshow(task['train'][2]['input'], cmap=cmap, norm=norm)
    axs[0].axis('off')
    axs[0].set_title('Train Input')
    axs[1].imshow(task['train'][2]['output'], cmap=cmap, norm=norm)
    axs[1].axis('off')
    axs[1].set_title('Train Output')
    axs[2].imshow(task['test'][0]['input'], cmap=cmap, norm=norm)
    axs[2].axis('off')
    axs[2].set_title('Test Input')
    axs[3].imshow(task['test'][0]['output'], cmap=cmap, norm=norm)
    axs[3].axis('off')
    axs[3].set_title('Test Output')
    plt.tight_layout()
    plt.show()




plot_task(task)




def extract_data(files):
    train_x= []
    train_y = []
    test_x= []
    test_y = []
    for file in files:
        train_temp_x= []
        train_temp_y = []
        test_temp_x= []
        test_temp_y = []
        task_file = str(training_path / file)
        with open(task_file, 'r') as f:
            task = json.load(f)
        for c in range(len(task['train'])):
            train_temp_x.append(np.asarray(task['train'][c]['input']))
            train_temp_y.append(np.asarray(task['train'][c]['output']))
        for c in range(len(task['test'])):
            test_temp_x.append(np.asarray(task['test'][c]['input']))
            test_temp_y.append(np.asarray(task['test'][c]['output']))
        train_x.append(train_temp_x)
        train_y.append(train_temp_y)
        test_x.append(test_temp_x)
        test_y.append(test_temp_y)
    return train_x, train_y, test_x, test_y    




train_x, train_y, test_x, test_y  = extract_data(training_tasks)




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 4, figsize=(15,15))
axs[0].imshow(train_x[0][1], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('Train Input')
axs[1].imshow(train_y[0][1], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('Train Output')
axs[2].imshow(test_x[0][0], cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('Test Input')
axs[3].imshow(test_y[0][0], cmap=cmap, norm=norm)
axs[3].axis('off')
axs[3].set_title('Test Output')
plt.tight_layout()




NUM_EPOCHS = 2000
BATCH_SIZE = 64
LEARNING_RATE=0.001




def reshapeData(X_, y_):
    X_ = X_.reshape(X_.shape[0],X_.shape[1],X_.shape[2],1)
    y_ = y_.reshape(y_.shape[0],y_.shape[1],y_.shape[2],1)
    return X_,y_




def InitializeSession():
    tf.compat.v1.keras.backend.clear_session()
    tf.compat.v1.reset_default_graph()
    tf.compat.v1.set_random_seed(123)
    session_conf = tf.compat.v1.ConfigProto(intra_op_parallelism_threads=1, inter_op_parallelism_threads=1)
    sess = tf.compat.v1.Session(graph=tf.compat.v1.get_default_graph(), config=session_conf)
    tf.compat.v1.keras.backend.set_session(sess)




def Lattice_Model(input_data, target_data, use_lim):
    
    # We are going to have 2-d embedding as one of lattice inputs.
    lattice_sizes = [5, 4, 3, 2, 3, 4, 5]
    
    input_ = tf.keras.layers.Input(shape=(input_data.shape[1], input_data.shape[2],1), name='Input')
    conv_1 = tf.keras.layers.Conv2D(128, 
                                    (3,3),
                                    activation='relu',
                                    padding='same', 
                                    name='conv_1')
    activation = tf.keras.layers.LeakyReLU()
    conv_2 = tf.keras.layers.Conv2D(128, 
                                    (1,1),
                                    activation='relu', 
                                    name='conv_2')
    conv_3 = tf.keras.layers.Conv2D(128,
                                    5,
                                    activation='relu',
                                    padding='same',
                                    name='conv_3')
    dropout = tf.keras.layers.Dropout(0.4,
                                      name='Dropout')
    
    flatten = tf.keras.layers.Flatten(name='Flatten')
    
    dense_1 = tf.keras.layers.Dense(target_data.shape[1]*target_data.shape[2]*7,
                                    name='Dense')
    
    reshape = tf.keras.layers.Reshape((target_data.shape[1],target_data.shape[2],7))
    if use_lim == 1:
        lattice = tfl.layers.Lattice(
                                    lattice_sizes=lattice_sizes,
                                    monotonicities=['none']*7,
                                    units=target_data.shape[2],
                                    output_min=target_data.min(),
                                    output_max=target_data.max(),
                                    name = 'Lattice'
                                    )
    else:
        lattice = tfl.layers.Lattice(
                                    lattice_sizes=lattice_sizes,
                                    monotonicities=['none']*7,
                                    units=target_data.shape[2],
                                    name = 'Lattice'
                                    )
    #model_1 = tf.keras.models.Sequential()
    model = (conv_1)(input_)
    model = (activation)(model)
    model = (conv_2)(model)
    model = (activation)(model)
    model = (dropout)(model)
    model = (conv_3)(model)
    model = (activation)(model)   
    model = (dropout)(model)
    model = (flatten)(model)
    model = (dropout)(model)
    model = (dense_1)(model)
    model = (activation)(model)
    model = (reshape)(model)
    model = (lattice)(model)
    #model.build()
    
    return tf.keras.models.Model(input_,model)




def ModelFit(model, X_, y_, use_lim):
    if use_lim==1:
        loss_ = tf.keras.losses.mean_squared_error
    else:
        loss_ = tf.keras.losses.binary_crossentropy
    model.compile(
        loss=loss_,
        optimizer=tf.keras.optimizers.Adam(learning_rate=LEARNING_RATE)
    )

    model.fit(
        X_,
        y_,
        batch_size=BATCH_SIZE,
        epochs=NUM_EPOCHS,
        validation_split=0.2,
        verbose=0
    )
    return model




train_x_1, train_y_1 = reshapeData(np.array(train_x[0]),np.array(train_y[0]))




InitializeSession()
Model_1 = Lattice_Model(train_x_1, train_y_1,0)
Model_1.summary()




Model_1 = ModelFit(Model_1,train_x_1, train_y_1,0)
Model_1.evaluate(train_x_1, train_y_1)




pred_1 = Model_1.predict(np.array(test_x[0]).reshape(1,np.array(test_x[0]).shape[1],np.array(test_x[0]).shape[2],1))
pred_1 = pred_1.reshape(np.array(test_y[0]).shape[1],np.array(test_y[0]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[0][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[0][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_1), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout() 




train_x_2, train_y_2 = reshapeData(np.array(train_x[2]),np.array(train_y[2]))




InitializeSession()
Model_2 = Lattice_Model(train_x_2, train_y_2,0)
Model_2 = ModelFit(Model_2,train_x_2, train_y_2,0)
Model_2.evaluate(train_x_2, train_y_2)




pred_2 = Model_2.predict(np.array(test_x[2]).reshape(1,np.array(test_x[2]).shape[1],np.array(test_x[2]).shape[2],1))
pred_2 = pred_2.reshape(np.array(test_y[2]).shape[1],np.array(test_y[2]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[2][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[2][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_2), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




InitializeSession()
Model_2_1 = Lattice_Model(train_x_2, train_y_2,1)
Model_2_1 = ModelFit(Model_2_1,train_x_2, train_y_2,1)
Model_2_1.evaluate(train_x_2, train_y_2)




pred_2_1 = Model_2_1.predict(np.array(test_x[2]).reshape(1,np.array(test_x[2]).shape[1],np.array(test_x[2]).shape[2],1))
pred_2_1 = pred_2_1.reshape(np.array(test_y[2]).shape[1],np.array(test_y[2]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[2][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[2][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_2_1), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_3, train_y_3 = reshapeData(np.array(train_x[4]),np.array(train_y[4]))




InitializeSession()
Model_3 = Lattice_Model(train_x_3, train_y_3,1)
Model_3 = ModelFit(Model_3,train_x_3, train_y_3,1)
Model_3.evaluate(train_x_3, train_y_3)




pred_3 = Model_3.predict(np.array(test_x[4]).reshape(1,np.array(test_x[4]).shape[1],np.array(test_x[4]).shape[2],1))
pred_3 = pred_3.reshape(np.array(test_y[4]).shape[1],np.array(test_y[4]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[4][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[4][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_3), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_4, train_y_4 = reshapeData(np.array(train_x[5]),np.array(train_y[5]))




InitializeSession()
Model_4 = Lattice_Model(train_x_4, train_y_4,0)
Model_4 = ModelFit(Model_4,train_x_4, train_y_4,0)
Model_4.evaluate(train_x_4, train_y_4)




pred_4 = Model_4.predict(np.array(test_x[5]).reshape(1,np.array(test_x[5]).shape[1],np.array(test_x[5]).shape[2],1))
pred_4 = pred_4.reshape(np.array(test_y[5]).shape[1],np.array(test_y[5]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[5][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[5][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_4), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_5, train_y_5 = reshapeData(np.array(train_x[6]),np.array(train_y[6]))




InitializeSession()
Model_5 = Lattice_Model(train_x_5, train_y_5,1)
Model_5 = ModelFit(Model_5,train_x_5, train_y_5,1)
Model_5.evaluate(train_x_5, train_y_5)




pred_5 = Model_5.predict(np.array(test_x[6]).reshape(1,np.array(test_x[6]).shape[1],np.array(test_x[6]).shape[2],1))
pred_5 = pred_5.reshape(np.array(test_y[6]).shape[1],np.array(test_y[6]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[6][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[6][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(np.rot90(pred_5)), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_6, train_y_6 = reshapeData(np.array(train_x[9]),np.array(train_y[9]))




InitializeSession()
Model_6 = Lattice_Model(train_x_6, train_y_6,1)
Model_6 = ModelFit(Model_6,train_x_6, train_y_6,1)
Model_6.evaluate(train_x_6, train_y_6)




pred_6 = Model_6.predict(np.array(test_x[9]).reshape(1,np.array(test_x[9]).shape[1],np.array(test_x[9]).shape[2],1))
pred_6 = pred_6.reshape(np.array(test_y[9]).shape[1],np.array(test_y[9]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[9][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[9][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_6), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_7, train_y_7 = reshapeData(np.array(train_x[10]),np.array(train_y[10]))




InitializeSession()
Model_7 = Lattice_Model(train_x_7, train_y_7,1)
Model_7 = ModelFit(Model_7,train_x_7, train_y_7,1)
Model_7.evaluate(train_x_7, train_y_7)




pred_7 = Model_7.predict(np.array(test_x[10]).reshape(1,np.array(test_x[10]).shape[1],np.array(test_x[10]).shape[2],1))
pred_7 = pred_7.reshape(np.array(test_y[10]).shape[1],np.array(test_y[10]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[10][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[10][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_7), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_8, train_y_8 = reshapeData(np.array(train_x[11]),np.array(train_y[11]))




InitializeSession()
Model_8 = Lattice_Model(train_x_8, train_y_8,1)
Model_8 = ModelFit(Model_8,train_x_8, train_y_8,1)
Model_8.evaluate(train_x_8, train_y_8)




pred_8 = Model_8.predict(np.array(test_x[11]).reshape(1,np.array(test_x[11]).shape[1],np.array(test_x[11]).shape[2],1))
pred_8 = pred_8.reshape(np.array(test_y[11]).shape[1],np.array(test_y[11]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[11][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[11][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_8), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_9, train_y_9 = reshapeData(np.array(train_x[14]),np.array(train_y[14]))




InitializeSession()
Model_9 = Lattice_Model(train_x_9, train_y_9,1)
Model_9 = ModelFit(Model_9,train_x_9, train_y_9,1)
Model_9.evaluate(train_x_9, train_y_9)




pred_9 = Model_9.predict(np.array(test_x[14]).reshape(1,np.array(test_x[14]).shape[1],np.array(test_x[14]).shape[2],1))
pred_9 = pred_9.reshape(np.array(test_y[14]).shape[1],np.array(test_y[14]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[14][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[14][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_9), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_10, train_y_10 = reshapeData(np.array(train_x[15]),np.array(train_y[15]))




InitializeSession()
Model_10 = Lattice_Model(train_x_10, train_y_10,1)
Model_10 = ModelFit(Model_10,train_x_10, train_y_10,1)
Model_10.evaluate(train_x_10, train_y_10)




pred_10 = Model_10.predict(np.array(test_x[15]).reshape(1,np.array(test_x[15]).shape[1],np.array(test_x[15]).shape[2],1))
pred_10 = pred_10.reshape(np.array(test_y[15]).shape[1],np.array(test_y[15]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[15][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[15][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(np.rot90(pred_10)), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_11, train_y_11 = reshapeData(np.array(train_x[16]),np.array(train_y[16]))




InitializeSession()
Model_11 = Lattice_Model(train_x_11, train_y_11,1)
Model_11 = ModelFit(Model_11,train_x_11, train_y_11,1)
Model_11.evaluate(train_x_11, train_y_11)




pred_11 = Model_11.predict(np.array(test_x[16]).reshape(1,np.array(test_x[16]).shape[1],np.array(test_x[16]).shape[2],1))
pred_11 = pred_11.reshape(np.array(test_y[16]).shape[1],np.array(test_y[16]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[16][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[16][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_11), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_12, train_y_12 = reshapeData(np.array(train_x[19]),np.array(train_y[19]))




InitializeSession()
Model_12 = Lattice_Model(train_x_12, train_y_12,1)
Model_12 = ModelFit(Model_12,train_x_12, train_y_12,1)
Model_12.evaluate(train_x_12, train_y_12)




pred_12 = Model_12.predict(np.array(test_x[19]).reshape(1,np.array(test_x[19]).shape[1],np.array(test_x[19]).shape[2],1))
pred_12 = pred_12.reshape(np.array(test_y[19]).shape[1],np.array(test_y[19]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[19][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[19][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_12), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




InitializeSession()
Model_12_1 = Lattice_Model(train_x_12, train_y_12,0)
Model_12_1 = ModelFit(Model_12_1,train_x_12, train_y_12,0)
Model_12_1.evaluate(train_x_12, train_y_12)




pred_12_1 = Model_12_1.predict(np.array(test_x[19]).reshape(1,np.array(test_x[19]).shape[1],np.array(test_x[19]).shape[2],1))
pred_12_1 = pred_12_1.reshape(np.array(test_y[19]).shape[1],np.array(test_y[19]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[19][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[19][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(pred_12_1), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_13, train_y_13 = reshapeData(np.array(train_x[21]),np.array(train_y[21]))




InitializeSession()
Model_13 = Lattice_Model(train_x_13, train_y_13,1)
Model_13 = ModelFit(Model_13,train_x_13, train_y_13,1)
Model_13.evaluate(train_x_13, train_y_13)




pred_13 = Model_13.predict(np.array(test_x[21]).reshape(1,np.array(test_x[21]).shape[1],np.array(test_x[21]).shape[2],1))
pred_13 = pred_13.reshape(np.array(test_y[21]).shape[1],np.array(test_y[21]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[21][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[21][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow(np.rot90(np.rot90(pred_13.T)), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_14, train_y_14 = reshapeData(np.array(train_x[25]),np.array(train_y[25]))




InitializeSession()
Model_14 = Lattice_Model(train_x_14, train_y_14,0)
Model_14 = ModelFit(Model_14,train_x_14, train_y_14,0)
Model_14.evaluate(train_x_14, train_y_14)




pred_14 = Model_14.predict(np.array(test_x[25]).reshape(1,np.array(test_x[25]).shape[1],np.array(test_x[25]).shape[2],1))
pred_14 = pred_14.reshape(np.array(test_y[25]).shape[1],np.array(test_y[25]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[25][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[25][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_14), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()




train_x_15, train_y_15 = reshapeData(np.array(train_x[26]),np.array(train_y[26]))




InitializeSession()
Model_15 = Lattice_Model(train_x_15, train_y_15,1)
Model_15 = ModelFit(Model_15,train_x_15, train_y_15,1)
Model_15.evaluate(train_x_15, train_y_15)




pred_15 = Model_15.predict(np.array(test_x[26]).reshape(1,np.array(test_x[26]).shape[1],np.array(test_x[26]).shape[2],1))
pred_15 = pred_15.reshape(np.array(test_y[26]).shape[1],np.array(test_y[26]).shape[2])




cmap = colors.ListedColormap(
        ['#000000', '#0074D9','#FF4136','#2ECC40','#FFDC00',
         '#AAAAAA', '#F012BE', '#FF851B', '#7FDBFF', '#870C25'])
norm = colors.Normalize(vmin=0, vmax=9)
fig, axs = plt.subplots(1, 3, figsize=(15,15))
axs[0].imshow(test_x[26][0], cmap=cmap, norm=norm)
axs[0].axis('off')
axs[0].set_title('test Input')
axs[1].imshow(test_y[26][0], cmap=cmap, norm=norm)
axs[1].axis('off')
axs[1].set_title('test Output')
axs[2].imshow((pred_15), cmap=cmap, norm=norm)
axs[2].axis('off')
axs[2].set_title('predicted output')
plt.tight_layout()






